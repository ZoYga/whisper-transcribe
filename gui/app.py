# gui/app.py
import os
import threading
import customtkinter as ctk
from tkinterdnd2 import TkinterDnD, DND_FILES
from tkinter import filedialog, messagebox
from core import transcribe_audio, save_transcription


class TranscriberApp(TkinterDnD.Tk):
    def __init__(self):
        super().__init__()

        # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã: –¢–ï–ú–ù–ê–Ø, —Å–∏–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        ctk.set_appearance_mode("Dark")
        ctk.set_default_color_theme("blue")

        self.title("Whisper Transcriber")
        self.geometry("600x580")
        self.minsize(500, 550)
        self.resizable(True, True)

        # –î–∞–Ω–Ω—ã–µ
        self.audio_path = None
        self.model_var = ctk.StringVar(value="turbo")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é turbo

        self.build_ui()

    def build_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º ‚Äî —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω
        main_frame = ctk.CTkFrame(self, fg_color="#121212", corner_radius=0)
        main_frame.pack(fill="both", expand=True, padx=0, pady=0)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            main_frame,
            text="üéôÔ∏è Whisper Transcriber",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#FFFFFF"
        )
        title_label.pack(pady=(30, 5))

        subtitle_label = ctk.CTkLabel(
            main_frame,
            text="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä—É—á–Ω—É—é",
            font=ctk.CTkFont(size=13),
            text_color="#AAAAAA"
        )
        subtitle_label.pack(pady=(0, 20))

        # –°—Ç—Ä–æ–∫–∞ —Å drop-–∑–æ–Ω–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª"
        row_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        row_frame.pack(pady=(0, 20), fill="x", padx=40)

        # Drop-–∑–æ–Ω–∞ ‚Äî —Ç—ë–º–Ω–∞—è –ø–ª–∞—à–∫–∞
        self.drop_frame = ctk.CTkFrame(
            row_frame,
            width=300,
            height=100,
            corner_radius=8,
            fg_color="#222222",
            border_width=1,
            border_color="#404040"
        )
        self.drop_frame.pack(side="left", padx=(0, 20))
        self.drop_frame.pack_propagate(False)

        drop_inner = ctk.CTkFrame(self.drop_frame, fg_color="transparent")
        drop_inner.pack(expand=True)

        icon_label = ctk.CTkLabel(
            drop_inner,
            text="üìÅ",
            font=ctk.CTkFont(size=20),
            text_color="#CCCCCC"
        )
        icon_label.pack()

        text_label = ctk.CTkLabel(
            drop_inner,
            text="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å—é–¥–∞\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, M4A, FLAC, OGG",
            font=ctk.CTkFont(size=12),
            text_color="#CCCCCC",
            justify="center"
        )
        text_label.pack(pady=(5, 0))

        # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª"
        select_btn = ctk.CTkButton(
            row_frame,
            text="üìÇ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª",
            width=180,
            height=36,
            font=ctk.CTkFont(size=13),
            command=self.select_file
        )
        select_btn.pack(side="left")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è drag-and-drop
        self.drop_frame.drop_target_register(DND_FILES)
        self.drop_frame.dnd_bind("<<Drop>>", self.on_drop)

        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–æ
        model_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        model_frame.pack(pady=(0, 20))

        model_label = ctk.CTkLabel(
            model_frame,
            text="–ú–æ–¥–µ–ª—å Whisper:",
            font=ctk.CTkFont(size=13),
            text_color="#CCCCCC"
        )
        model_label.pack(side="left", padx=(0, 10))

        model_options = ["tiny", "base", "small", "medium", "large", "turbo"]
        model_menu = ctk.CTkOptionMenu(
            model_frame,
            variable=self.model_var,
            values=model_options,
            width=120,
            height=32,
            font=ctk.CTkFont(size=13),
            dropdown_font=ctk.CTkFont(size=13)
        )
        model_menu.pack(side="left")

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é" ‚Äî –±–æ–ª—å—à–∞—è, –≤–Ω–∏–∑—É
        self.transcribe_btn = ctk.CTkButton(
            main_frame,
            text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é",
            width=220,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            state="disabled",
            command=self.start_transcription
        )
        self.transcribe_btn.pack(pady=(30, 20))

        # –°—Ç–∞—Ç—É—Å–Ω–∞—è –º–µ—Ç–∫–∞ ‚Äî –≤ —Å–∞–º–æ–º –Ω–∏–∑—É
        self.status_label = ctk.CTkLabel(
            main_frame,
            text="",
            font=ctk.CTkFont(size=12),
            text_color="#AAAAAA",
            wraplength=500,
            justify="center"
        )
        self.status_label.pack(pady=(0, 20))

        # –ü–ª–∞—à–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ ‚Äî –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        self.file_info_frame = None

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    def on_drop(self, event):
        path = event.data.strip("{}")
        if self.is_audio(path):
            self.set_file(path)
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")

    def select_file(self):
        path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª",
            filetypes=[
                ("–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã", "*.mp3 *.wav *.m4a *.flac *.ogg *.aac"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        if path and self.is_audio(path):
            self.set_file(path)

    def is_audio(self, path):
        ext = os.path.splitext(path)[1].lower()
        return ext in {".mp3", ".wav", ".m4a", ".flac", ".ogg", ".aac"}

    def set_file(self, path):
        self.audio_path = path
        filename = os.path.basename(path)

        # –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—à–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ –≤–Ω–∏–∑—É
        if self.file_info_frame:
            self.file_info_frame.destroy()

        self.file_info_frame = ctk.CTkFrame(
            self.winfo_children()[0],  # main_frame
            width=480,
            height=100,
            corner_radius=8,
            fg_color="#222222",
            border_width=1,
            border_color="#404040"
        )
        self.file_info_frame.pack(pady=(0, 20), padx=40, fill="x")

        info_inner = ctk.CTkFrame(self.file_info_frame, fg_color="transparent")
        info_inner.pack(expand=True)

        check_icon = ctk.CTkLabel(
            info_inner,
            text="‚úÖ",
            font=ctk.CTkFont(size=24),
            text_color="#00D1B2"
        )
        check_icon.pack()

        file_label = ctk.CTkLabel(
            info_inner,
            text=f"–§–∞–π–ª:\n{filename}",
            font=ctk.CTkFont(size=13),
            text_color="#00D1B2",
            justify="center"
        )
        file_label.pack(pady=(5, 0))

        self.transcribe_btn.configure(state="normal")

    def start_transcription(self):
        if not self.audio_path:
            return

        self.transcribe_btn.configure(state="disabled")
        self.update_status("‚è≥ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...", "#FFD166")

        thread = threading.Thread(target=self.run_transcription, daemon=True)
        thread.start()

    def run_transcription(self):
        model_name = self.model_var.get()
        result = transcribe_audio(self.audio_path, model_name)

        if result["success"]:
            try:
                output_path = save_transcription(result["text"], self.audio_path)
                self.update_status(f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{output_path}", "#06D6A0")
            except Exception as e:
                self.update_status(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:\n{str(e)}", "#EF476F")
        else:
            self.update_status(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:\n{result['error']}", "#EF476F")

        self.transcribe_btn.configure(state="normal")

    def update_status(self, text, color):
        self.after(0, lambda: self.status_label.configure(text=text, text_color=color))